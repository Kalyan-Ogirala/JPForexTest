package com.kalyantest.draw.drawingapp.business;

import static java.lang.Math.*;
import org.springframework.stereotype.Component;
import com.kalyantest.draw.drawingapp.entity.Point;
import com.kalyantest.draw.drawingapp.entity.Canvas;
import com.kalyantest.draw.drawingapp.entity.Commands.*;
import org.springframework.beans.factory.annotation.Autowired;

@Component
public class DrawBL {

    @Autowired
    CommandFactory commandFactory;

    @Autowired
    Canvas canvas;

    public Canvas drawLine(Point x, Point y, char character)
    {
         if (validateInput(canvas, x, y)) {
             for (int i =  min(x.getX(), y.getX()); i <= max(x.getX(), y.getX()); i++) {
                for (int j = min(x.getY(), y.getY()); j <= max(x.getY(), y.getY()); j++) {
                    canvas.getShape()[i][j] = character;
                }
             }
         }
         return canvas;
    }

    public boolean validateInput(Canvas c, Point x, Point y)
    {
        if (c != null && c.getShape() != null && x.getY() >= 0 && x.getY() >= 0 && x.getX() >= 0 && y.getY() >= 0) {
            if(x.getX() <= c.getShape().length && y.getX() <= c.getShape().length)
            {
                if(x.getY() <= c.getShape()[0].length && y.getY() <= c.getShape()[0].length)
                {
                    return true;
                }
            }
        }
        return  false;
    }

    public Command inputCommandInterpreter(String commandText)
    {
        return commandFactory.getCommand(commandText);
    }

    public void fillColor(Point p, char color)
    {
        for (int i = p.getY(); i < (canvas.getShape().length); i++) {
            for (int j = p.getX(); j < (canvas.getShape()[0].length); j++) {
                if ("|-x".indexOf(canvas.getShape()[i][j]) == -1) {
                    canvas.getShape()[i][j] = color;
                } else break;
            }

            for (int j = p.getX(); j > 0; j--) {
                if ("|-x".indexOf(canvas.getShape()[i][j]) == -1) {
                    canvas.getShape()[i][j] = color;
                } else break;
            }
        }

        for (int i = p.getY(); i > 0; i--) {
            for (int j = p.getX(); j < (canvas.getShape()[0].length); j++) {
                if ("|-x".indexOf(canvas.getShape()[i][j]) == -1) {
                    canvas.getShape()[i][j] = color;
                } else break;
            }

            for (int j = p.getX(); j > 0; j--) {
                if ("|-x".indexOf(canvas.getShape()[i][j]) == -1) {
                    canvas.getShape()[i][j] = color;
                } else break;
            }
        }
    }

    public void printShape()
    {
        for (int i = 0; i < canvas.getShape().length; i++) {
            for (int j = 0; j < canvas.getShape()[0].length; j++) {
                System.out.print(canvas.getShape()[i][j]);
            }
            System.out.println();
        }
    }
}
