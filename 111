package com.kalyantest.draw.drawingapp.business;

import com.kalyantest.draw.drawingapp.entity.Canvas;
import com.kalyantest.draw.drawingapp.entity.Commands.*;
import com.kalyantest.draw.drawingapp.entity.Point;
import lombok.Builder;
import org.reflections.Reflections;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@Component
public class CommandFactory extends AbstractFactory{

    @Autowired
    C c;

    @Autowired
    L l;

    @Autowired
    Q q;

    @Autowired
    R r;

    @Autowired
    B b;

    @Autowired
    Canvas canvas;

    public static List<String> availableCommands = new ArrayList<>();

    @Override
    public Command getCommand(String commandText)
    {
        try {
            String[] commandSplit = commandText.trim().split("\\s+");

            if (availableCommands.contains(commandSplit[0].toUpperCase())) {
                switch (commandSplit[0].toUpperCase()) {
                    case "B":
                        b.setPoint(new Point(Integer.valueOf(commandSplit[1]), Integer.valueOf(commandSplit[2])));
                        b.setColor(commandSplit[3].charAt(0));
                        return b;
                    case "C":
                        c.setWidth(Integer.valueOf(commandSplit[1]));
                        c.setHeight(Integer.valueOf(commandSplit[2]));
                        c.setCanvas();
                        return c;
                    case "L":
                        l.setP1(new Point(Integer.valueOf(commandSplit[1]), Integer.valueOf(commandSplit[2])));
                        l.setP2(new Point(Integer.valueOf(commandSplit[3]), Integer.valueOf(commandSplit[4])));
                        return l;
                    case "Q":
                        return q;
                    case "R":
                        r.setP1(new Point(Integer.valueOf(commandSplit[1]), Integer.valueOf(commandSplit[2])));
                        r.setP2(new Point(Integer.valueOf(commandSplit[3]), Integer.valueOf(commandSplit[4])));
                        return r;
                }
            }
        }
        catch (Exception e)
        {
            return null;
        }
        return null;
    }

    @PostConstruct
    public void setAvailableCommands()
    {
        Reflections reflections = new Reflections("com.kalyantest.draw.drawingapp.entity.Commands");
        Set<Class<? extends Command>> classes = reflections.getSubTypesOf(Command.class);
        for (Class c : classes){
            availableCommands.add(c.getSimpleName());
        }
    }
}
