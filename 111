package com.kalyantest.draw.drawingapp.service;

import com.kalyantest.draw.drawingapp.DrawingAppApplication;
import com.kalyantest.draw.drawingapp.entity.Canvas;
import com.kalyantest.draw.drawingapp.entity.Commands.*;
import com.kalyantest.draw.drawingapp.entity.Point;
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import javax.annotation.PostConstruct;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = DrawingAppApplication.class)
public class DrawServiceTest {

    @Autowired
    DrawService drawService;

    @Autowired
    Canvas canvas;

    @Autowired
    C c;

    @Autowired
    L l;

    @Autowired
    R r;

    @Autowired
    B b;

    Canvas mockCanvas;
    char[][] shapeC;
    char[][] shapeL;
    char[][] shapeR;
    char[][] shapeB;

    @PostConstruct
    public void Intialize()
    {
        mockCanvas = mock(Canvas.class);

        shapeC = new char[][]{
                {'|', '-', '-', '-', '-', '|'},
                {'|',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ','|'},
                {'|', '-', '-', '-', '-', '|'}
        };

        shapeL = new char[][]{
                {'|','-','-','-','-','|'},
                {'x','x','x','x','x','|'},
                {'|',' ', ' ',' ',' ','|'},
                {'|',' ',' ',' ',' ','|'},
                {'|',' ',' ',' ',' ','|'},
                {'|','-','-','-','-','|'}
        };

        shapeR = new char[][]{
                {'|','-','-','-','-','|'},
                {'x','x','x',' ',' ','|'},
                {'x',' ','x',' ',' ','|'},
                {'x','x','x',' ',' ','|'},
                {'|',' ',' ',' ',' ','|'},
                {'|','-','-','-','-','|'}
        };

        shapeB = new char[][]{
                {'|','-','-','-','-','|'},
                {'x','x','x','o','o','|'},
                {'x',' ','x','o','o','|'},
                {'x','x','x','o','o','|'},
                {'|','o','o','o','o','|'},
                {'|','-','-','-','-','|'}
        };
    }

    @Test
    public void readCommand_PositiveCase_Basic()
    {
        String input = "C 6 6";
        InputStream in = new ByteArrayInputStream(input.getBytes());
        System.setIn(in);
        Command userCommand = drawService.readCommand();
        assertTrue(userCommand instanceof C);
        assertTrue(canvas.getShape().length == 6);
        assertTrue(canvas.getShape()[0].length == 6);
    }

    @Test
    public void readCommand_NegativeCase()
    {
        String input = "P 5 2 10 10";
        InputStream in = new ByteArrayInputStream(input.getBytes());
        System.setIn(in);
        Command userCommand = drawService.readCommand();
        assertNull(userCommand);
    }

    //Test Command C

    @Test
    public void draw_Command_C_PositiveCase()
    {
        c.setWidth(6);
        c.setHeight(6);
        c.setCanvas();
        drawService.draw(c);
        when(mockCanvas.getShape()).thenReturn(shapeC);
        assertArrayEquals(mockCanvas.getShape(), canvas.getShape());
    }

    //Test Command L

    @Test
    public void draw_Command_L_PositiveCase()
    {
        c.setWidth(6);
        c.setHeight(6);
        c.setCanvas();
        drawService.draw(c);

        l.setP1(new Point(1, 2));
        l.setP2(new Point (5, 2));
        drawService.draw(l);

        when(mockCanvas.getShape()).thenReturn(shapeL);
        assertArrayEquals(mockCanvas.getShape(), canvas.getShape());
    }

    //Test Command R

    @Test
    public void draw_Command_R_PositiveCase()
    {
        c.setWidth(6);
        c.setHeight(6);
        c.setCanvas();
        drawService.draw(c);

        r.setP1(new Point(1, 2));
        r.setP2(new Point (3, 4));
        drawService.draw(r);

        when(mockCanvas.getShape()).thenReturn(shapeR);
        assertArrayEquals(mockCanvas.getShape(), canvas.getShape());
    }

    //Test Command B

    @Test
    public void draw_Command_B_PositiveCase()
    {
        c.setWidth(6);
        c.setHeight(6);
        c.setCanvas();
        drawService.draw(c);

        r.setP1(new Point(1, 2));
        r.setP2(new Point (3, 4));
        drawService.draw(r);

        b.setPoint(new Point(4, 3));
        b.setColor('o');
        drawService.draw(b);

        when(mockCanvas.getShape()).thenReturn(shapeB);
        assertArrayEquals(mockCanvas.getShape(), canvas.getShape());
    }

    //Test Invalid Command

    @Test
    public void draw_Invalid_NegativeCase()
    {
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outContent));
        drawService.draw(null);
        assertEquals("Invalid Command! Please try again." + System.lineSeparator(), outContent.toString());
    }
}
